eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIGJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvdGYtdGVzdHJ1bm5lcjoke0RST05FX0NPTU1JVF9TSEF9IC4KCiAgaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrdGZ0ZXN0cnVubmVyIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC90Zi10ZXN0cnVubmVyOiR7RFJPTkVfQ09NTUlUX1NIQX0KCgogIHRlc3RfZXhhbXBsZV9pbXBsZW1lbnRhdGlvbjoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvdGYtdGVzdHJ1bm5lcjoke0RST05FX0NPTU1JVF9TSEF9IC4KICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGJhc2ljLXByb29mCiAgICAgIC0gcHl0aG9uIC1tIHVuaXR0ZXN0IHRlc3RzLypfdGVzdC5weQoKICB0YWdfYXNfbGF0ZXN0X3F1YXk6CiAgICBpbWFnZTogZG9ja2VyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3RmdGVzdHJ1bm5lciIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC90Zi10ZXN0cnVubmVyOiR7RFJPTkVfQ09NTUlUX1NIQX0gcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3RmLXRlc3RydW5uZXI6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3RmLXRlc3RydW5uZXI6bGF0ZXN0CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6ZGluZAogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgY29tbWFuZDoKICAgICAgLSAiLXMiCiAgICAgIC0gIm92ZXJsYXkiCg.Gd66oEb5Obl4Odv_LJHGF6_f5lrVVnaGT3SZe7pn4yg